HW9.best=(pred.Z==max(pred.Z))
HW9newdata.best = data.frame(X=HW9newdata.feas[HW9.best,])
upperbounds = 5
lowerbounds = -5
N = 1000000
set.seed("3120")
HW9newdata = matrix(rep(0,N),nrow=N)
HW9newdata = runif(N,lowerbounds,upperbounds)
HW9newdata = as.data.frame(HW9newdata)
names(HW9newdata) = names(HW9)[3]
pred.Y = predict(HW9Y,HW9newdata,type="response")
HW9.feas = (pred.Y >= 0.8)
HW9newdata.feas = data.frame(X=HW9newdata[HW9.feas,])
pred.Z = predict(HW9Z,HW9newdata.feas,type="response")
HW9.best=(pred.Z==max(pred.Z))
HW9newdata.best = data.frame(X=HW9newdata.feas[HW9.best,])
summary(HW9newdata.best)
dat = read.csv('StoveTop.csv',header=TRUE)
attach(dat)
Sales_93_ts = ts(Sales_93,start=c(2000,4),frequency=12)
class(Sales_93_ts)
plot(Sales_93_ts,type="b")
plot(Sales_93~month,col=(year-1999))
par(mfrow=c(3,1))
plot(Sales_93~month,main="no transform")
plot(sqrt(Sales_93)~month,main="square root")
plot(log(Sales_93)~month,main="log")
library('forecast')
sales_holt = HoltWinters(Sales_93_ts)
holt_forecast = forecast(sales_holt,h=36)
plot(holt_forecast,main="Holt-Winters forecasts, line 93")
abline(h=0)
install.packages("forecast")
library('forecast')
sales_holt = HoltWinters(Sales_93_ts)
holt_forecast = forecast(sales_holt,h=36)
plot(holt_forecast,main="Holt-Winters forecasts, line 93")
abline(h=0)
?forecast
?HoltWinters
?abline
?exp
par(mfrow=c(2,1))
plot(holt_forecast,main="Holt-Winters forecasts, line 93, no transform")
abline(h=0)
holt_log = HoltWinters(log(Sales_93_ts))
forecast_log$lower = exp(forecast_log$lower)
forecast_log$upper = exp(forecast_log$mean)
forecast_log$mean = exp(forecast_log$mean)
forecast_log$fitted = exp(forecast_log$fitted)
forecast_log$x = exp(forecast_log$x)
plot(forecast_log,main="Holt-Winters forecasts, line 93, log transform",ylab="Sales")
abline(h=0)
par(mfrow=c(2,1))
plot(holt_forecast,main="Holt-Winters forecasts, line 93, no transform")
abline(h=0)
holt_log = HoltWinters(log(Sales_93_ts))
forecast_log = forecast(holt_log,h=36)
forecast_log$lower = exp(forecast_log$lower)
forecast_log$upper = exp(forecast_log$mean)
forecast_log$mean = exp(forecast_log$mean)
forecast_log$fitted = exp(forecast_log$fitted)
forecast_log$x = exp(forecast_log$x)
plot(forecast_log,main="Holt-Winters forecasts, line 93, log transform",ylab="Sales")
abline(h=0)
par(mfrow=c(2,1))
plot(holt_forecast,main="Holt-Winters forecasts, line 93, no transform")
abline(h=0)
holt_log = HoltWinters(log(Sales_93_ts))
forecast_log = forecast(holt_log,h=36)
forecast_log$lower = exp(forecast_log$lower)
forecast_log$upper = exp(forecast_log$upper)
forecast_log$mean = exp(forecast_log$mean)
forecast_log$fitted = exp(forecast_log$fitted)
forecast_log$x = exp(forecast_log$x)
plot(forecast_log,main="Holt-Winters forecasts, line 93, log transform",ylab="Sales")
abline(h=0)
par(mfrow=c(1,2))
resid = ts(residuals(holt_log),start=c(2000,4),frequency=12)
plot(resid,type="b")
acf(resid)
?holt
?HoltWinters
?HoltWinters
?HoltWinters
clear
x <- NULL
y <- NULL
x[1] <- 0
for (i in 1:1000) {
y[i] <- x[i] + rnorm(1,mean=0,sd=1)
x[i+1] <- x[i] + rnorm(1,mean=0,sd=0.01)
}
plot(y)
lines(x)
HoltWinters(y,beta=FALSE,gamma=FALSE)
x <- NULL
y <- NULL
x[1] <- 0
for (i in 1:1000) {
y[i] <- x[i] + rnorm(1,mean=0,sd=1)
x[i+1] <- x[i] + rnorm(1,mean=0.5,sd=0.01)
}
plot(y)
HoltWinters(y,beta=FALSE,gamma=FALSE)
x <- NULL
y <- NULL
x[1] <- 0
for (i in 1:1000) {
y[i] <- x[i] + rnorm(1,mean=0,sd=1)
x[i+1] <- x[i] + rnorm(1,mean=1.5,sd=0.01)
}
plot(y)
HoltWinters(y,beta=FALSE,gamma=FALSE)
wdata = read.csv(file="QualTech.csv",header=TRUE)
par(mfrow=c(1,3))
boxplot(wdata$thickness)
qqnorm(wdata$thickness)
plot(wdata$thickness)
wdata = read.csv(file="QualTech.csv",header=TRUE)
par(mfrow=c(1,3))
boxplot(wdata$thickness)
qqnorm(wdata$thickness)
plot(wdata$thickness)
wdata = read.csv(file="QualTech.csv",header=TRUE)
wdata$thickness[49] = wdata$thickness[49] - 10
par(mfrow=c(1,3))
boxplot(wdata$thickness)
qqnorm(wdata$thickness)
plot(wdata$thickness)
wdata = read.csv(file="QualTech.csv",header=TRUE)
wdata$thickness[49] = wdata$thickness[49] - 10
par(mfrow=c(1,3))
boxplot(wdata$thickness)
qqnorm(wdata$thickness)
plot(wdata$thickness)
wdata = read.csv(file="QualTech.csv",header=TRUE)
par(mfrow=c(1,3))
boxplot(wdata$thickness)
qqnorm(wdata$thickness)
plot(wdata$thickness)
library(nlme)
chip.lme = lme(fixed = thickness ~ 1, data=wdata,random= ~1|run/wafer)
VarCorr(chip.lme)
fixef(chip.lme)
chip.lme$residual[1:5,]
chip.lme$residual[1:5,]
par(mfrow=cbind(1,3))
boxplot(chip.lme$residual[,1]~wdata$run,xlab="run")
boxplot(chip.lme$residual[,2]~wdata$run,xlab="run")
boxplot(chip.lme$residual[,3]~wdata$run,xlab="run")
chip.lme$residual[1:5,]
par(mfrow=cbind(1,3))
boxplot(chip.lme$residual[,1]~wdata$run,xlab="run")
boxplot(chip.lme$residual[,2]~wdata$run,xlab="run")
boxplot(chip.lme$residual[,3]~wdata$run,xlab="run")
help(plot.default)
par(mfrow=cbind(1,3))
boxplot(chip.lme$residual[,1]~wdata$run,main="fixed",xlab="run")
boxplot(chip.lme$residual[,2]~wdata$run,main="run",xlab="run")
boxplot(chip.lme$residual[,3]~wdata$run,main="wafer",xlab="run")
wdata$thickness[49] = wdata$thickness[49]-10
par(mfrow=cbind(1,3))
boxplot(chip.lme$residual[,1]~wdata$run,main="fixed",xlab="run")
boxplot(chip.lme$residual[,2]~wdata$run,main="run",xlab="run")
boxplot(chip.lme$residual[,3]~wdata$run,main="wafer",xlab="run")
wdata = read.csv(file="QualTech.csv",header=TRUE)
wdata$thickness[49] = wdata$thickness[49] - 10
par(mfrow=c(1,3))
boxplot(wdata$thickness)
qqnorm(wdata$thickness)
plot(wdata$thickness)
library(nlme)
chip.lme = lme(fixed = thickness ~ 1, data=wdata,random= ~1|run/wafer)
VarCorr(chip.lme)
fixef(chip.lme)
chip.lme$residual[1:5,]
par(mfrow=cbind(1,3))
boxplot(chip.lme$residual[,1]~wdata$run,main="fixed",xlab="run")
boxplot(chip.lme$residual[,2]~wdata$run,main="run",xlab="run")
boxplot(chip.lme$residual[,3]~wdata$run,main="wafer",xlab="run")
ACF = ARMAacf(ar=c(0,.8),ma=0,24)[-1]
PACF = ARMAacf(ar=c(0,.8),ma=0,24,pacf=TRUE)
par(mfrow=c(1,2))
plot(ACF,type='h',xlab='lag')
plot(PACF,type='h',xlab='lag')
library(wikipediatrend)
library(forecast)
data = wp_trend(page=c("Tom Brady"),from="2013-01-01",to="2016-01-20")
Xt = ts(data$count)
acf(Xt)
pacf(Xt)
model1 = auto.arima(Xt,max.P=0,max.Q=0)
model2 = HoltWinters(Xt,beta=FALSE,gamma=FALSE)
model3 = auto.arima(Xt,max.p=0,max.P=0,max.Q=0)
library(ISLR)
import(ISLR)
package(ISLR)
library('ISLR')
istall.packages('ISLR')
install.packages('ISLR')
library('ISLR')
set.seed(101)
x = matrix(rnorm(100*2),100,2)
xmean = matrix(rnorm(8,sd=4),4,2)
which = sample(1:4,100,replace=TRUE)
x = x + mean[which,]
plot(x,col=which,pch=19)
set.seed(101)
x = matrix(rnorm(100*2),100,2)
xmean = matrix(rnorm(8,sd=4),4,2)
which = sample(1:4,100,replace=TRUE)
x = x + xmean[which,]
plot(x,col=which,pch=19)
set.seed(4)
km.out = kmeans(x,4,nstart=15)
km.out
plot(x,col=km.out$cluster,pch=1,cex=2,lwd=2)
points(x,col=c(3,1,4,2)[which],pch=19)
table(km.out)
points(x,col=which,pch=19)
set.seed(4)
km.out = kmeans(x,4,nstart=1)
km.out$tot.withinss
km.out = kmeans(x,4,nstart=20)
km.out$tot.withinss
set.seed(4)
km.out = kmeans(x,4,nstart=1)
km.out$tot.withinss
km.out = kmeans(x,4,nstart=1)
km.out$tot.withinss
set.seed(1)
km.out = kmeans(x,4,nstart=1)
km.out$tot.withinss
km.out = kmeans(x,4,nstart=20)
km.out$tot.withinss
table(km.out,c(3,1,4,2)[which])
hc.single = hclust(dist(x),method='single')
plot(hc.single,main='Single Linkage',cex=.9)
hc.complete = hclust(dist(x),method='complete')
plot(hc.complete,main='Complete Linkage',cex=.9)
hc.complete = hclust(dist(x),method='complete')
hc.average = hclust(dist(x),method='average')
hc.single = hclust(dist(x),method='single')
plot(hc.complete,main='Complete Linkage',cex=.9) #balanced
plot(hc.average,main='Average Linkage',cex=.9) #inbetween
plot(hc.single,main='Single Linkage',cex=.9)
hc.cut = cutree(hc.complete,4)
table(hc.cut,c(3,2,1,4)[which])
table(km.out,which)
plot(x,col=hc.cut,pch=1,cex=2,lwd=2)
points(x,col=c(3,2,1,4)[which],pch=19)
set.seed(101)
x = matrix(rnorm(100*2),100,2)
xmean = matrix(rnorm(8,sd=4),4,2)
which = sample(1:4,100,replace=TRUE)
x = x + xmean[which,]
plot(x,col=which,pch=19)
#implement kmeans
set.seed(4)
km.out = kmeans(x,4,nstart=15)
km.out
plot(x,col=km.out$cluster,pch=1,cex=2,lwd=2)
points(x,col=c(3,1,4,2)[which],pch=19) #change labels to same as before
points(x,col=which,pch=19) #original
table(km.out,which)
table(x,which)
table(x,km.out)
clear
x3 = matrix(rnorm(30*3),ncol=3)
dd = as.dist(1-cor(t(x3)))
plot(hclust(dd,method='compete'))
plot(hclust(dd,method='complete'))
nci.labs = NCI60$labs
nci.data = NCI60$data
dim(nci.data)
nci.labs
table(nci.labs)
table(km.out$cluster,which)
help(kmeans)
set.seed(101)
x = matrix(rnorm(100*2),100,2)
xmean = matrix(rnorm(8,sd=4),4,2)
which = sample(1:4,100,replace=TRUE)
x = x + xmean[which,]
plot(x,col=which,pch=19)
set.seed(4)
km.out = kmeans(x,4,nstart=15)
km.out
plot(x,col=km.out$cluster,pch=1,cex=2,lwd=2)
points(x,col=c(3,1,4,2)[which],pch=19) #change labels to same as before
points(x,col=which,pch=19)
table(km.out$cluster,which)
set.seed(1)
km.out = kmeans(x,4,nstart=1)
km.out$tot.withinss
km.out = kmeans(x,4,nstart=20)
km.out$tot.withinss
library('ISLR')
nci.labs = NCI60$labs
nci.data = NCI60$data
dim(nci.data)
nci.labs
table(nci.labs)
sd.data = scale(nci.data)
data.dist = dist(sd.data)
plot(hclust(data.dist),labels=nci.labs,main='Complete')
plot(hclust(data.dist,method='average'),labels=nci.labs,main='Average')
plot(hclust(data.dist,method='single'),labels=nci.labs,main='Single')
hc.out = hclust(dist(sd.data),method='complete')
hc.clusters=cutree(hc.out,5)
table(hc.clusters,nci.labs)
hc.out
set.seed(3)
km.out = kmeans(sd.data,5,nstart=20)
km.clusters = km.out$cluster
table(km.clusters,nci.labs)
table(km.clusters,hc.clusters)
dd = as.dist(1-cor(t(sd.data)))
hc.cb = hclust(dd,method='complete')
hc.cb.clusters = cutree(hc.cb,5)
table(km.clusters,hc.cb.clusters)
table(hc.clusters,hc.cb.clusters)
set.seed(3)
km.out = kmeans(sd.data,5,nstart=20)
km.clusters = km.out$cluster
table(km.clusters,nci.labs)
table(km.clusters,hc.clusters)
table(hc.clusters,nci.labs)
table(km.clusters,nci.labs)
table(km.clusters,hc.clusters)
dd = as.dist(1-cor(t(sd.data)))
hc.cb = hclust(dd,method='complete')
hc.cb.clusters = cutree(hc.cb,5)
table(km.clusters,hc.cb.clusters)
table(hc.clusters,hc.cb.clusters)
library(ISLR)
attach(Wage)
library(splines)
gam1 = lm(wage~ns(year,4)+ns(age,5),data=Wage)
library(gam)
gam.m3 = gam(wage~s*(year,4)+s(age,5)+education,data=Wage)
install(gam)
install.packages(gam)
install.packages('gam')
install.packages('gam')
library('gam')
gam.m3 = gam(wage~s*(year,4)+s(age,5)+education,data=Wage)
gam.m3 = gam(wage~s(year,4)+s(age,5)+education,data=Wage)
par(mfrow=c(1,3))
plot(gam.m3,se=TRUE,col="blue")
plot.gam(gam1,se=TRUE,col="red")
plot(gam.m3,se=TRUE,col="blue")
par(mfrow=c(1,3))
plot(gam.m3,se=TRUE,col="blue")
plot.gam(gam1,se=TRUE,col="red")
par(mfrow=c(1,3))
plot.gam(gam1,se=TRUE,col="red")
gam1 = lm(wage~ns(year,4)+ns(age,5)+education,data=Wage)
plot.gam(gam1,se=TRUE,col="red")
gam.m1 = gam(wage~s(age,5)+education,data=Wage)
gam.m2 = gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1,gam.m2,gam.m3,test="F")
summary(gam.m3)
preds = predict(gam.m2,newdata=Wage)
gam.lr = game(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage)
par(mfrow=c(1,3))
plot(gam.lr,se=T,col="green")
gam.lr = gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage)
par(mfrow=c(1,3))
plot(gam.lr,se=T,col="green")
table(education,I(wage>250))
gam.lr = gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage,subset=(education!="1. < HS Grad"))
plot(gam.lr,se=T,col="green")
gam.lr = gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage)
par(mfrow=c(1,3))
plot(gam.lr,se=T,col="green")
gam.lr.s = gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage,subset=(education!="1. < HS Grad"))
plot(gam.lr.s,se=T,col="green")
gam1 = lm(wage~ns(year,4)+ns(age,5)+education,data=Wage)
gam.m3 = gam(wage~s(year,4)+s(age,5)+education,data=Wage)
par(mfrow=c(1,3))
plot(gam.m3,se=TRUE,col="blue")
plot.gam(gam1,se=TRUE,col="red")
table(km.clusters,hc.cb.clusters)
table(hc.clusters,hc.cb.clusters)
length(seq(-0.5,0.5,0.01))
w = seq(-0.5,0.5,0.01)
w[1]
pi
w = seq(-0.5,0.5,0.01)
t1 = 0.5
t2 = 0.75
p1 = 0.5
p2 = 0.75
s = 1
f = rep(0,length(w))
for (i in 1:length(w)) {
num = 1 + t1^2 + t2^2 + 2*t1*(1+t2)*cos(2*pi*w[i]) + 2*t2*cos(4*pi*w[i])
denom = 1 + p1^2 + p2^2 - 2*p1*(1-p2)*cos(2*pi*w[i]) - 2*p2*cos(4*pi*w[i])
f[i] = s*num/denom
}
plot(w,f,type='l')
plot(w,f,type='l',main='Spectral Density')
plot(w,f,type='l',main='Spectral Density of ARMA(2,2)')
library('tree')
library('ISLR')
library('randomForest')
library('MASS')
attach(Carseats)
High = ifelse(Sales<=8,"No","Yes")
Carseats = data.frame(Carseats,High)
set.seed(2)
train = sample(1:nrow(Carseats),200)
Carseats.test = Carseats[-train,]
High.test = High[-train]
set.seed(2)
bag.carseats = randomForest(High~.-Sales,Carseats,subset=train,mtry=13,importance=TRUE)
bag.pred = predict(bag.carseats,Carseats.test,type='class')
table(bag.pred,High.test)
?randomForest
bag.carseats = randomForest(High~.-Sales,Carseats,subset=train,importance=TRUE,ntree=10)
view(Boston)
Boston
set.seed(2)
bag.carseats = randomForest(High~.-Sales,Carseats,subset=train,mtry=11,importance=TRUE,ntree=10)
bag.pred = predict(bag.carseats,Carseats.test,type='class')
table(bag.pred,High.test)
set.seed(2)
bag.carseats = randomForest(High~.-Sales,data=Carseats,subset=train,mtry=11,importance=TRUE,ntree=10)
Boston
set.seed(2)
bag.carseats = randomForest(High~.-Sales,data=Carseats,subset=train,mtry=10,importance=TRUE,ntree=10)
bag.pred = predict(bag.carseats,Carseats.test,type='class')
table(bag.pred,High.test)
(93+58)/200
1-(93+58)/200
importance(bag.carseats)
varImpPlot(bag.carseats)
set.seed(2)
bag.carseats = randomForest(High~.-Sales,data=Carseats,subset=train,mtry=10,importance=TRUE,ntree=500)
bag.pred = predict(bag.carseats,Carseats.test,type='class')
table(bag.pred,High.test)
(94+67)/200
1-(94+67)/200
set.seed(2)
bag.carseats = randomForest(High~.-Sales,data=Carseats,subset=train,mtry=3,importance=TRUE,ntree=500)
bag.pred = predict(bag.carseats,Carseats.test,type='class')
table(bag.pred,High.test)
(100+64)/200
1-(100+64)/200
movie_data = read.csv('movie_data_cleaned.csv',header=TRUE)
setwd("~/Cornell/Semesters/Spring 2017/ORIE 4740/ORIE4740_Project")
movie_data = read.csv('movie_data_cleaned.csv',header=TRUE)
View(movie_data)
movie_data$content_rating = as.character(movie_data$content_rating)
ratings = c()
for (i in 1:length(movie_data$content_rating)) {
ratings = union(ratings,movie_data$content_rating[i])
}
for (i in 1:length(ratings)) {
ratings[i] = gsub('-','_',tolower(ratings[i]))
}
ratings
ratings = c()
for (i in 1:length(movie_data$content_rating)) {
if (movie_data$content_rating[i] == '') {
movie_data$content_rating[i] = 'Not Rated'
}
ratings = union(ratings,movie_data$content_rating[i])
}
for (i in 1:length(ratings)) {
ratings[i] = gsub('-','_',tolower(ratings[i]))
}
ratings
movie_ratings = matrix(0,length(movie_data$content_rating),length(ratings))
for (i in 1:length(movie_data$content_rating)) {
rate = gsub('-','_',tolower(movie_data$content_rating[i]))
movie_ratings[i,match(rate,ratings)] = 1
}
#create rating columns in movie_data based on movie_ratings
for (i in 1:length(ratings)) {
movie_data[ratings[i]] = movie_ratings[,i]
}
View(movie_data)
movie_data = read.csv('movie_data_cleaned.csv',header=TRUE)
#get and process ratings
movie_data$content_rating = as.character(movie_data$content_rating)
ratings = c()
for (i in 1:length(movie_data$content_rating)) {
if (movie_data$content_rating[i] == '' | movie_data$content_rating[i] == 'Not Rated') {
movie_data$content_rating[i] = 'not_rated'
}
ratings = union(ratings,movie_data$content_rating[i])
}
for (i in 1:length(ratings)) {
ratings[i] = gsub('-','_',tolower(ratings[i]))
}
#populate a matrix with rating values
movie_ratings = matrix(0,length(movie_data$content_rating),length(ratings))
for (i in 1:length(movie_data$content_rating)) {
rate = gsub('-','_',tolower(movie_data$content_rating[i]))
movie_ratings[i,match(rate,ratings)] = 1
}
#create rating columns in movie_data based on movie_ratings
for (i in 1:length(ratings)) {
movie_data[ratings[i]] = movie_ratings[,i]
}
View(movie_data)
movie_data = movie_data[,!colnames(movie_data) %in% c('content_rating')]
write.csv(movie_data,'movie_data_cleaned.csv')
write.csv(movie_data,'movie_data_cleaned_v2.csv')
